/*
 * Copyright (C) 2017 skydoves
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.skydoves.processor;

import android.arch.lifecycle.LifecycleObserver;
import android.arch.lifecycle.LifecycleOwner;
import android.content.Context;
import android.content.SharedPreferences;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;
import com.squareup.javapoet.WildcardTypeName;

import java.lang.ref.SoftReference;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.List;

import javax.lang.model.element.Modifier;

public class KickbackBoxGenerator {

    private final KickbackBoxAnnotatedClass annotatedClazz;

    private final String FIELD_INSTANCE = "instance";
    private final String CLAZZ_PREFIX = "Kickback_";
    private final String FIELD_PREFIX = "kickback_";
    private final String FIELD_PREFERENCE = "preference";
    private final String SETTER_PREFIX = "set";
    private final String GETTER_PREFIX = "get";
    private final String FREE_PREFIX = "free";
    private final String FREE_ALL = "freeAll";

    public KickbackBoxGenerator(KickbackBoxAnnotatedClass annotatedClazz) {
        this.annotatedClazz = annotatedClazz;
    }

    public TypeSpec generate() {
        return TypeSpec.classBuilder(getClassName())
                .addJavadoc("Generated by Kickback. (https://github.com/skydoves/Kickback).\n")
                .addModifiers(Modifier.PUBLIC)
                .superclass(ClassName.get(annotatedClazz.annotatedElement))
                .addSuperinterface(LifecycleObserver.class)
                .addField(getInstanceFieldSpec())
                .addFields(getKickbackFields())
                .addField(preferenceFieldSpec())
                .addMethod(getConstructorSpec())
                .addMethod(getInstanceMethodSpec())
                .addMethod(initPersistMethodSpec())
                .addMethods(getSetterMethodSpecs())
                .addMethods(getGetterMethodSpecs())
                .addMethods(getFreeMethodSpecs())
                .addMethod(getBoxNameSpec())
                .addMethods(getElementNameListSpecs())
                .addMethod(getFreeAllSpec())
                .addMethod(setLifecycleObserverSpec())
                .addMethod(getLifecycleObserverSpec())
                .build();
    }

    private MethodSpec getConstructorSpec() {
        return MethodSpec.constructorBuilder()
                .addModifiers(Modifier.PRIVATE)
                .build();
    }

    private FieldSpec getInstanceFieldSpec() {
        return FieldSpec.builder(getClassType(), FIELD_INSTANCE, Modifier.PRIVATE, Modifier.STATIC).build();
    }

    private FieldSpec preferenceFieldSpec() {
        return FieldSpec.builder(SharedPreferences.class, FIELD_PREFERENCE, Modifier.PRIVATE, Modifier.STATIC).build();
    }

    private MethodSpec getInstanceMethodSpec() {
        return MethodSpec.methodBuilder("getInstance")
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                .addStatement("if(" + FIELD_INSTANCE + " == null) " + FIELD_INSTANCE + " = new " + getClassName() + "()")
                .addStatement("return " + FIELD_INSTANCE)
                .returns(getClassType())
                .build();
    }

    private MethodSpec initPersistMethodSpec() {
        return MethodSpec.methodBuilder("initPersist")
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                .addParameter(ParameterSpec.builder(Context.class, "context").build())
                .addStatement("$T impl = new $T()", getPreferenceFactoryImplClassName(), getPreferenceFactoryImplClassName())
                .addStatement("if(" + FIELD_PREFERENCE + " == null) " + FIELD_PREFERENCE + " = impl.create(context)")
                .build();
    }

    private ClassName getPreferenceFactoryImplClassName() {
        return ClassName.get(annotatedClazz.packageName, annotatedClazz.boxName + "PreferencesFactoryImpl");
    }

    private List<FieldSpec> getKickbackFields() {
        List<FieldSpec> fieldSpecList = new ArrayList<>();
        this.annotatedClazz.kickbackElementList.forEach(element -> {
            if(element.isWeak) {
                TypeName elementWild = WildcardTypeName.subtypeOf(element.typeName);
                TypeName weakTypeName = ParameterizedTypeName.get(ClassName.get(WeakReference.class), elementWild);
                FieldSpec.Builder builder = FieldSpec.builder(weakTypeName, getFieldName(element.elementName), Modifier.PRIVATE, Modifier.STATIC);
                if (element.value != null) {
                    if (element.isPrimitive) {
                        builder.initializer("new $T($L)", WeakReference.class, element.value);
                    } else if (element.value instanceof String) {
                        builder.initializer("new $T($S)", WeakReference.class,  element.value);
                    }
                }  else {
                    builder.initializer("new $T(null)", SoftReference.class);
                }
                fieldSpecList.add(builder.build());
            } else if(element.isSoft) {
                TypeName elementWild = WildcardTypeName.subtypeOf(element.typeName);
                TypeName softTypeName = ParameterizedTypeName.get(ClassName.get(SoftReference.class), elementWild);
                FieldSpec.Builder builder = FieldSpec.builder(softTypeName, getFieldName(element.elementName), Modifier.PRIVATE, Modifier.STATIC);
                if (element.value != null) {
                    if (element.isPrimitive) {
                        builder.initializer("new $T($L)", SoftReference.class, element.value);
                    } else if (element.value instanceof String) {
                        builder.initializer("new $T($S)", SoftReference.class,  element.value);
                    }
                } else {
                    builder.initializer("new $T(null)", SoftReference.class);
                }
                fieldSpecList.add(builder.build());
            }  else {
                FieldSpec.Builder builder = FieldSpec.builder(element.typeName, getFieldName(element.elementName), Modifier.PRIVATE, Modifier.STATIC);

                if (element.value != null) {
                    if (element.isPrimitive) {
                        builder.initializer("$L", element.value);
                    } else if (element.value instanceof String) {
                        builder.initializer("$S", element.value);
                    }
                }
                fieldSpecList.add(builder.build());
            }
        });
        return fieldSpecList;
    }

    private List<MethodSpec> getSetterMethodSpecs() {
        List<MethodSpec> setterSpecList = new ArrayList<>();
        this.annotatedClazz.kickbackElementList.forEach(element -> {
            if(element.isWeak) {
                MethodSpec setterSpec = MethodSpec.methodBuilder(getSetterPrefixName(element.elementName))
                        .addModifiers(Modifier.PUBLIC)
                        .addParameter(element.typeName, element.elementName.toLowerCase())
                        .addStatement(getReferenceSetterStatement(element), getFieldName(element.elementName), WeakReference.class, element.elementName.toLowerCase())
                        .build();
                setterSpecList.add(setterSpec);
            } else if(element.isSoft) {
                MethodSpec setterSpec = MethodSpec.methodBuilder(getSetterPrefixName(element.elementName))
                        .addModifiers(Modifier.PUBLIC)
                        .addParameter(element.typeName, element.elementName.toLowerCase())
                        .addStatement(getReferenceSetterStatement(element), getFieldName(element.elementName), SoftReference.class, element.elementName.toLowerCase())
                        .build();
                setterSpecList.add(setterSpec);
            } else {
                MethodSpec setterSpec = MethodSpec.methodBuilder(getSetterPrefixName(element.elementName))
                        .addModifiers(Modifier.PUBLIC)
                        .addParameter(element.typeName, element.elementName.toLowerCase())
                        .addStatement(getSetterStatement(element), getFieldName(element.elementName), element.elementName.toLowerCase())
                        .build();
                setterSpecList.add(setterSpec);
            }
        });
        return setterSpecList;
    }

    private String getReferenceSetterStatement(KickbackElementClass element) {
        if(element.isObjectField) {
            String superMethodName = annotatedClazz.setterFunctionsList.get(element.elementName).getSimpleName().toString();
            return String.format("$N = new $T(super.%s($N))", superMethodName);
        } else {
            return String.format("$N = new $T($N)", getFieldName(element.elementName));
        }
    }

    private String getSetterStatement(KickbackElementClass element) {
        if(element.isObjectField) {
            String superMethodName = annotatedClazz.setterFunctionsList.get(element.elementName).getSimpleName().toString();
            return String.format("$N = super.%s($N)", superMethodName);
        } else {
            return String.format("$N = $N");
        }
    }

    private List<MethodSpec> getGetterMethodSpecs() {
        List<MethodSpec> getterSpecList = new ArrayList<>();
        this.annotatedClazz.kickbackElementList.forEach(element -> {
            if(element.isWeak || element.isSoft) {
                MethodSpec getterSpec = MethodSpec.methodBuilder(getGetterPrefixName(element.elementName))
                        .addModifiers(Modifier.PUBLIC)
                        .returns(element.typeName)
                        .addStatement(getReferenceGetterStatement(element), getFieldName(element.elementName))
                        .build();
                getterSpecList.add(getterSpec);
            } else {
                MethodSpec getterSpec = MethodSpec.methodBuilder(getGetterPrefixName(element.elementName))
                        .addModifiers(Modifier.PUBLIC)
                        .returns(element.typeName)
                        .addStatement(getGetterStatement(element), getFieldName(element.elementName))
                        .build();
                getterSpecList.add(getterSpec);
            }
        });
        return getterSpecList;
    }

    private String getReferenceGetterStatement(KickbackElementClass element) {
        if(element.isObjectField) {
            String superMethodName = annotatedClazz.getterFunctionsList.get(element.elementName).getSimpleName().toString();
            return String.format("return super.%s($N.get())", superMethodName);
        } else {
            return String.format("return $N.get()");
        }
    }

    private String getGetterStatement(KickbackElementClass element) {
        if(element.isObjectField) {
            String superMethodName = annotatedClazz.getterFunctionsList.get(element.elementName).getSimpleName().toString();
            return String.format("return super.%s($N)", superMethodName);
        } else {
            return String.format("return $N");
        }
    }

    private List<MethodSpec> getFreeMethodSpecs() {
        List<MethodSpec> freeSpecList = new ArrayList<>();
        this.annotatedClazz.kickbackElementList.forEach(element -> {
            if(element.isWeak || element.isSoft) {
                MethodSpec freeSpec = MethodSpec.methodBuilder(getFreePrefixName(element.elementName))
                        .addModifiers(Modifier.PUBLIC)
                        .addStatement("$N.clear()", getFieldName(element.elementName))
                        .build();
                freeSpecList.add(freeSpec);
            } else {
                MethodSpec freeSpec = MethodSpec.methodBuilder(getFreePrefixName(element.elementName))
                        .addModifiers(Modifier.PUBLIC)
                        .addStatement("$N = null", getFieldName(element.elementName))
                        .build();
                freeSpecList.add(freeSpec);
            }
        });
        return freeSpecList;
    }

    private MethodSpec getBoxNameSpec() {
        return MethodSpec.methodBuilder("getBoxName")
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                .returns(String.class)
                .addStatement("return $S", this.annotatedClazz.boxName)
                .build();
    }

    private List<MethodSpec> getElementNameListSpecs() {
        List<MethodSpec> nameSpecList = new ArrayList<>();
        this.annotatedClazz.kickbackElementList.forEach(element -> {
            MethodSpec nameSped = MethodSpec.methodBuilder(String.format("get%sName", element.elementName))
                    .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                    .returns(String.class)
                    .addStatement("return $S", element.elementName)
                    .build();
            nameSpecList.add(nameSped);
        });
        return nameSpecList;
    }

    private MethodSpec getFreeAllSpec() {
         MethodSpec.Builder builder = MethodSpec.methodBuilder(FREE_ALL)
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC);

         this.annotatedClazz.kickbackElementList.forEach(element ->
             builder.addStatement(FIELD_INSTANCE + "." + getFreePrefixName(element.elementName) + "()"));

         return builder.build();
    }

    private MethodSpec setLifecycleObserverSpec() {
        return MethodSpec.methodBuilder("setLifecycleObserver")
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                .addParameter(LifecycleOwner.class, "lifecycleOwner")
                .addStatement("lifecycleOwner.getLifecycle().addObserver(" + FIELD_INSTANCE + ")")
                .build();
    }

    private MethodSpec getLifecycleObserverSpec() {
        return MethodSpec.methodBuilder("getLifecycleObserver")
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                .returns(LifecycleObserver.class)
                .addStatement("return " + FIELD_INSTANCE)
                .build();
    }

    private String getClassName() {
        return CLAZZ_PREFIX + this.annotatedClazz.boxName;
    }

    private ClassName getClassType() {
        return ClassName.get(annotatedClazz.packageName, getClassName());
    }

    private String getFieldName(String name) {
        return FIELD_PREFIX + name;
    }

    private String getSetterPrefixName(String name) {
        return SETTER_PREFIX + name;
    }

    private String getGetterPrefixName(String name) {
        return GETTER_PREFIX + name;
    }

    private String getFreePrefixName(String name) {
        return FREE_PREFIX + name;
    }
}
